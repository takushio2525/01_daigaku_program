# -*- coding: utf-8 -*-
"""IntroCS10_exercise_25G1065.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-yJSV6C4Q0Kf5SPRTM7V2RAcHLhvpVe

# 第10回 演習課題
このファイルを使用して，二つの演習課題を解き，以下のファイルを提出しなさい。
### 提出物：
- boold.pdf
- co2.pdf
- IntroCS10_exercise_[学籍番号].py

（IntroCS10_exercise.ipynbを.pyとしてダウンロードしファイル名を変更する）

### 提出期限：
- 2025年6月27日 （金）23:55（締切厳守）

# 単回帰分析（Simple regression analysis）
授業時間中に作成したSimpleRegressionクラスを作成する。

################の箇所を埋めていきます。
"""

import numpy as np
import matplotlib.pyplot as plt

class SimpleRegression():
  # コンストラクタを実装
  def __init__(self, x, y):
    # x, yデータを格納
    self.x = x
    self.y = y

    # xとyの平均値を計算して，x_mnとy_mnに格納しておく
    self.x_mn = sum(self.x) / len(self.x)
    self.y_mn = sum(self.y) / len(self.y)

    # x, yの各データと平均値との差分をx_diffおよびy_diffに格納しておく
    self.x_diff = self.x - self.x_mn
    self.y_diff = self.y - self.y_mn

    # hatb1, hatb0 を0で初期化
    self.hatb1 = 0
    self.hatb0 = 0


  # 回帰係数を推定するメソッドを実装
  def estRegCoeff(self):
    # 回帰係数hatb1の推定
    self.hatb1 = np.sum(self.x_diff * self.y_diff) / np.sum(self.x_diff ** 2)
    # 回帰係数hatb0の推定
    self.hatb0 = self.y_mn - self.hatb1 * self.x_mn
    return([self.hatb0, self.hatb1])

  # 予測値を計算するメソッドを実装
  def predict(self, x):
    # 推定した回帰係数を使用して，引数で受け取った値xの予測値を求める
    haty = self.hatb0 + self.hatb1 * x
    return(haty)

  #　決定係数を計算するメソッドを実装
  def calcCoeffDet(self):
    # predictメソッドを使って保持されているデータxの予測値hatyを求める
    haty = self.predict(self.x)
    # SSR, SSE, SSTの計算
    SSR = np.sum((haty - self.y_mn) ** 2)
    SSE = np.sum((self.y - haty) ** 2)
    SST = np.sum((self.y - self.y_mn) ** 2)
    #　R2の計算
    R2 = SSR / SST
    return([SSR, SSE, SST, R2])

"""# 演習問題1　血圧と年齢
ファイルblood.csvには，8名の年齢および血圧（mmHg）のデータが含まれている。年齢を説明変数，血圧を目的変数とした時，以下の問いに答えなさい。
"""

#　ファイルからデータを読み込む
import pandas as pd
df = pd.read_csv("blood.csv")
age = df["age"].values
blood = df["blood"].values

print("年齢（歳） = ", age)
print("血圧（mmHg） = ", blood)

"""## 1. 回帰式を答えなさい。


"""

# 年齢と血圧を変数として持つインスタンスの生成
reg_bp = ################
# 回帰係数の推定
[hatb0, hatb1] = ################
print("haty = ", np.round(hatb0,2), " + ", np.round(hatb1,2), "x")

"""## 2. 回帰式の決定係数を求めなさい。"""

#　決定係数を求める
param = ################
print("SSR = ", param[0])
print("SSE = ", param[1])
print("SST = ", param[2])
print("R2 = ", param[3])

"""## 3. 15歳，50歳，95歳の人の回帰式による血圧を答えなさい。"""

#　年齢を新たな変数に格納
age_unknown = ################
#　15歳，50歳，95歳の血圧を予測
hatBlood = ################
print("15歳：", np.round(hatBlood[0]), "mmHg, 50歳：", np.round(hatBlood[1]), "mmHg, 95歳：", np.round(hatBlood[2]), "mmHg")

"""## 4. 年齢と血圧の散布図と推定された回帰直線を描きなさい。また，回帰式から推定した15歳，50歳，95歳の血圧も図に示しなさい。"""

fig, ax = plt.subplots()
#　軸の設定
ax.set_xlim([0, 100])
ax.set_ylim([60, 200])
ax.set_xlabel("age", fontsize=14)
ax.set_ylabel("blood pressure [mmHg]", fontsize=14)
ax.grid()

# 年齢と血圧の散布図を描く
################
# 15歳，50歳，95歳の年齢と予測した血圧の散布図を描く（色は赤）
################

# x軸の値を取得
xticks = ax.get_xticks()
# x軸の値に対する予測値を取得
haty4xticks = ################
# 回帰直線を引く
################
# グラフのアスペクト比を1:1にする
ax.set_box_aspect(1)

plt.tight_layout()
# ファイルに書き出し
plt.savefig("./blood.pdf",dpi=300)

"""## 5. 上記の結果をふまえ，年齢と血圧の関係について説明するとともに，**回帰モデルによって両者の関係を説明することが妥当であるか**検討しなさい。

[5の解答欄]

# 演習課題2　ごみの焼却量と二酸化炭素排出量
ファイルco2.csvには1998年から2021年までの日本の二酸化炭素排出量（百万$t$）とごみの焼却量（万$t$）が含まれている。二酸化炭素排出量を説明変数co2，ごみ焼却量を目的変数incとする時，以下の問いに答えなさい。
"""

#　ファイルからデータを読み込む
import pandas as pd
df = ################
co2 = ################
inc = ################

print("ごみ焼却量（万t） = ", inc)
print("二酸化炭素排出量（百万t） = ", co2)

"""## 1.   回帰直線$y=\hat{\beta}_0+\hat{\beta}_1x$を答えなさい。

"""

reg_co2 = ################
[hatb0, hatb1] = ################
print("y = ", np.round(hatb0,2), " + ", np.round(hatb1,2), "x")

"""## 2.   二酸化炭素排出量とごみの焼却量の散布図と推定された回帰直線を描きなさい。


"""

fig, ax = plt.subplots()
ax.set_xlabel("incineration [$10^4$t]", fontsize=14)
ax.set_ylabel("CO2 [$10^6$t]", fontsize=14)
ax.grid()

# 二酸化炭素排出量とごみの焼却量の散布図
################

# x軸の値を取得
xticks = ax.get_xticks()
# x軸の値に対する予測値を取得
haty4xticks = ################
# 回帰直線を引く
################
# グラフのアスペクト比を1:1にする
ax.set_box_aspect(1)

plt.tight_layout()
#　ファイルに書き出し
plt.savefig("./co2.pdf",dpi=300)

"""## 3.   求めた回帰モデルの決定係数$R^2$を求めなさい。"""

param = ################
print("SSR = ", param[0])
print("SSE = ", param[1])
print("SST = ", param[2])
print("R2 = ", param[3])

"""## 4.   上記の結果より，ごみ焼却量から二酸化炭素の排出量を予測できるか，ごみ焼却量を減らせば二酸化炭素排出量も減らせるか考察しなさい。

[4の解答欄]

できる。なぜなら〜。
"""